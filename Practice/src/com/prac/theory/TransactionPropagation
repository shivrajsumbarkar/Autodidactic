1. Introduction

	In this tutorial, we'll cover the @Transactional annotation and its isolation and propagation settings.
2. What Is @Transactional?

We can use @Transactional to wrap a method in a database transaction.

It allows us to set propagation, isolation, timeout, read-only, and rollback conditions for our transaction. Also, we can specify the transaction manager.
2.1. @Transactional Implementation Details

	Spring creates a proxy or manipulates the class byte-code to manage the creation, commit, and rollback of the transaction.
	In the case of a proxy, Spring ignores @Transactional in internal method calls.

	Simply put, if we have a method like callMethod and we mark it as @Transactional, 
	Spring would wrap some transaction management code around the invocation:@Transactional method called:


2.2. How to Use @Transactional

We can put the annotation on definitions of interfaces, classes, or directly on methods.  
They override each other according to the priority order; from lowest to highest 
we have: Interface, superclass, class, interface method, superclass method, and class method.

Spring applies the class-level annotation to all public methods of this class that we did not annotate with @Transactional.

However, if we put the annotation on a private or protected method, Spring will ignore it without an error.

Let's start with an interface sample:
	
@Transactional
public interface TransferService {
    void transfer(String user1, String user2, double val);
}

Usually, it is not recommended to set the @Transactional on the interface. However, it is acceptable for cases like @Repository with Spring Data.
We can put the annotation on a class definition to override the transaction setting of the interface/superclass:
	
@Service
@Transactional
public class TransferServiceImpl implements TransferService {
    @Override
    public void transfer(String user1, String user2, double val) {
        // ...
    }
}

Now let's override it by setting the annotation directly on the method:
	
@Transactional
public void transfer(String user1, String user2, double val) {
    // ...
}
3. Transaction Propagation
----------------------------
Propagation defines our business logic‘s transaction boundary. 
Spring manages to start and pause a transaction according to our propagation setting.

Spring calls TransactionManager::getTransaction to get or create a transaction according to the propagation.
 It supports some of the propagations for all types of TransactionManager,
  but there are a few of them that only supported by specific implementations of TransactionManager.

Now let's go through the different propagations and how they work.

3.1. REQUIRED Propagation
--------------------------
REQUIRED is the default propagation. 
Spring checks if there is an active transaction, then it creates a new one if nothing existed. 
Otherwise, the business logic appends to the currently active transaction:
Ex::	
@Transactional(propagation = Propagation.REQUIRED)
public void requiredExample(String user) { 
    // ... 
}

Also as REQUIRED is the default propagation, we can simplify the code by dropping it:

@Transactional
public void requiredExample(String user) { 
    // ... 
}

3.2. SUPPORTS Propagation
-------------------------
For SUPPORTS, Spring first checks if an active transaction exists. 
If a transaction exists, then the existing transaction will be used. 
If there isn't a transaction, it is executed non-transactional:

@Transactional(propagation = Propagation.SUPPORTS)
public void supportsExample(String user) { 
    // ... 
}

Let's see the transaction creation's pseudo-code for SUPPORTS:
	
if (isExistingTransaction()) {
    if (isValidateExistingTransaction()) {
        validateExisitingAndThrowExceptionIfNotValid();
    }
    return existing;
}
return emptyTransaction;


3.3. MANDATORY Propagation
--------------------------
When the propagation is MANDATORY, if there is an active transaction, then it will be used.
If there isn't an active transaction, then Spring throws an exception:
	
@Transactional(propagation = Propagation.MANDATORY)
public void mandatoryExample(String user) { 
    // ... 
}

And let's again see the pseudo-code:

if (isExistingTransaction()) {
    if (isValidateExistingTransaction()) {
        validateExisitingAndThrowExceptionIfNotValid();
    }
    return existing;
}
throw IllegalTransactionStateException;

3.4. NEVER Propagation
-----------------------
For transactional logic with NEVER propagation, Spring throws an exception if there's an active transaction:

@Transactional(propagation = Propagation.NEVER)
public void neverExample(String user) { 
    // ... 
}

Let's see the pseudo-code of how transaction creation works for NEVER propagation:
	
if (isExistingTransaction()) {
    throw IllegalTransactionStateException;
}
return emptyTransaction;

3.5. NOT_SUPPORTED Propagation
------------------------------
Spring at first suspends the current transaction if it exists, then the business logic is executed without a transaction.

@Transactional(propagation = Propagation.NOT_SUPPORTED)
public void notSupportedExample(String user) { 
    // ... 
}


3.6. REQUIRES_NEW Propagation
-----------------------------
When the propagation is REQUIRES_NEW, Spring suspends the current transaction if it exists and then creates a new one:

@Transactional(propagation = Propagation.REQUIRES_NEW)
public void requiresNewExample(String user) { 
    // ... 
}

Similar to NOT_SUPPORTED, we need the JTATransactionManager for actual transaction suspension.

And the pseudo-code looks like so:
	
if (isExistingTransaction()) {
    suspend(existing);
    try {
        return createNewTransaction();
    } catch (exception) {
        resumeAfterBeginException();
        throw exception;
    }
}
return createNewTransaction();

3.7. NESTED Propagation
-----------------------
For NESTED propagation, Spring checks if a transaction exists, then if yes, it marks a savepoint. 
This means if our business logic execution throws an exception, then transaction rollbacks to this savepoint.
If there's no active transaction, it works like REQUIRED.


Finally, let's set the propagation to NESTED:
	
@Transactional(propagation = Propagation.NESTED)
public void nestedExample(String user) { 
    // ... 
}

*****************************************************
Isolation:

Defines the data contract between transactions.

    Read Uncommitted: Allows dirty reads.
    Read Committed: Does not allow dirty reads.
    Repeatable Read: If a row is read twice in the same transaction, the result will always be the same.
    Serializable: Performs all transactions in a sequence.

The different levels have different performance characteristics in a multi-threaded application. I think if you understand the dirty reads concept you will be able to select a good option.


We can set the isolation level for a method or class:
	
@Transactional(isolation = Isolation.READ_UNCOMMITTED)
public void log(String message) {
    // ...
}

**************************************************************
ACID Properties:

A- Atomicity ::Transactions are "all or nothing"
				All actions of the Transaction happen or none happen
C- Consistency :: Only valid data is saved
				Data is in a consistent state when a transaction starts and when it ends.
I- Isolation ::   Transactions do not affect each other
D- Durability :: Commited data will not be lost, even after power failure.
				
****************************************************************
Normalization Rule
----------------------
Normalization rules are divided into the following normal forms:

    First Normal Form
    Second Normal Form
    Third Normal Form
    BCNF
    Fourth Normal Form

First Normal Form (1NF)
------------------------
For a table to be in the First Normal Form, it should follow the following 4 rules:

    1.It should only have single(atomic) valued attributes/columns.
    2.Values stored in a column should be of the same domain
    3.All the columns in a table should have unique names.
    4.And the order in which data is stored, does not matter.

Second Normal Form (2NF)
------------------------
For a table to be in the Second Normal Form,

    1.It should be in the First Normal form.
    2.And, it should not have "Partial Dependency".
	Partial Dependency::
	-Partial Dependency, where an attribute in a table depends on only a part of the "primary key" 
						 and not on the "whole key" (i.e Composite Key).
	 EX:: The Score table and primary key for this table is a composition of two columns which is student_id & subject_id but the teacher's name only depends on subject, hence the subject_id, and has nothing to do with student_id.
	 
Third Normal Form (3NF)
------------------------
A table is said to be in the Third Normal Form when,

    1.It is in the Second Normal form.
    2.And, it doesn't have "Transitive Dependency".
	 Transitive Dependency::
	 -Transitive Dependency. When a non-prime attribute depends on other non-prime attributes rather than depending upon the prime attributes or primary key.
	 EX: Score table with exam_name is just another column in the score table.
	     It is not a primary key or even a part of the primary key, and total_marks depends on it.	
	     -- To remove Transitive Dependency just remove and add those column in exam table with exam ID

Boyce and Codd Normal Form (BCNF)
-----------------------------------
Boyce and Codd Normal Form is a higher version of the Third Normal form. This form deals with certain type of anomaly that is not handled by 3NF. A 3NF table which does not have multiple overlapping candidate keys is said to be in BCNF. For a table to be in BCNF, following conditions must be satisfied:

    1.R must be in 3rd Normal Form
    2.and, for each functional dependency ( X → Y ), X should be a super Key.
    
Fourth Normal Form (4NF)
------------------------
A table is said to be in the Fourth Normal Form when,

    1.It is in the Boyce-Codd Normal Form.
    2.And, it doesn't have Multi-Valued Dependency.
    multi-value dependency, which leads to un-necessary repetition of data and other anomalies as well.
    For a dependency A → B, if for a single value of A, multiple value of B exists, then the table may have multi-valued dependency.
	      			